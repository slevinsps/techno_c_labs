Задача A-2. Задача о системах счисления
Time limit:	14 s
Memory limit:	64 M
Составить программу для перевода чисел из системы счисления по основанию P в систему счисления по основанию Q, где 2 меньше или равно Q меньше P меньше или равно 36. 
Значения P, Q и строковое представление S числа в исходной системе счисления вводятся с клавиатуры в следующем порядке: 
P Q S 

S не выходит за границы size_t. 

Процедура перевода не может использовать соответствующей функции системной библиотеки и должна быть оформлена в виде отдельной функции, на вход которой подаются значения P, Q и S, размещенные в динамической памяти. 
На выход функция должна возвращать строковое представление S1 числа в целевой системе счисления. 

Программа должна уметь обрабатывать ошибки во входных данных. 
В случае возникновения ошибки нужно вывести в поток стандартного вывода сообщение "[error]" (без кавычек) и завершить выполнение программы. 

ВАЖНО! Программа в любом случае должна возвращать 0. Не пишите return -1, exit(1) и т.п. Даже если обнаружилась какая-то ошибка, все равно необходимо вернуть 0! (и напечатать [error] в stdout).

Examples
Input	Output
10 2 42
101010


Задача B-5. Парсер, логические выражения.
Time limit:	14 s
Memory limit:	64 M
Требуется написать программу, которая способна вычислять логическе выражения. 
Допустимые выражения чувствительны к регистру и могут содержать: 
1) знаки операций 'and' - и, 'or' - или, 'not' - отрицание, 'xor' - сложение по модулю 2 
2) Скобки '(', ')' 
3) Логические значения 'True', 'False' 
4) Пустое выражение имеет значение "False" 

Также требуется реализовать возможность задания переменных, которые могут состоять только из маленьких букв латинского алфавита (к примеру, 'x=True'). 
Объявление переменной имеет формат: 
<имя>=<True|False>; // допустимы пробелы 

Допускается несколько объявлений одной и той же переменной, учитывается последнее. 
Все переменные, используемые в выражении, должны быть заданы заранее. Также запрещены имена, совпадающие с ключевыми словами (and, or и т.д.). 

Необходимо учитывать приоритеты операций. Пробелы ничего не значат. 

Если выражение или объявление не удовлетворяют описанным правилам, требуется вывести в стандартный поток вывода "[error]" (без кавычек). 

ВАЖНО! Программа в любом случае должна возвращать 0. Не пишите return -1, exit(1) и т.п. Даже если обнаружилась какая-то ошибка, все равно необходимо вернуть 0! (и напечатать [error] в stdout).

Examples
Input	Output
iscat=True;
isdog=False;
(not iscat and isdog) or True
True
